@page "/"
@using BlazorTicTacToe.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveWebAssemblyRenderMode(false))
<h3>Lobby for TicTacToe</h3>

@if (_CurretGameRoom is null)
{

	<input @bind="_PlayerName" placeholder="Your Name"/>
	<input @bind="_CurrentRoomName" placeholder="Rooom Name"/>
	<button @onclick="CreateRoomAsync">Create Room</button>


	<h3>Rooms:</h3>
	<ul>
		@foreach (var room in Rooms)
		{
			<li>@room.RoomName <button @onclick="() => JoinRoom(room.RoomId)">Join Room</button> </li>
		}
	</ul>
}
else
{
	<CascadingValue Value="HubConnection">
		<BlazorTicTacToe.Client.Components.Room CurrentRoom="_CurretGameRoom" />
	</CascadingValue>
}

@code {

	private HubConnection? HubConnection;
	private string _PlayerName = string.Empty;
	private string _CurrentRoomName = string.Empty;
	private GameRoom? _CurretGameRoom;
	private List<GameRoom> Rooms = new();

	protected override async Task OnInitializedAsync()
	{
		HubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
			.Build();


		HubConnection.On<List<GameRoom>>("Rooms", (roomList) =>
		{
			Console.WriteLine($"We got Rooms! Count = {roomList.Count}");

			Rooms = roomList;

			StateHasChanged();
		});

		await HubConnection.StartAsync();
	}

	private async Task CreateRoomAsync()
	{
		if(HubConnection is null)
			return;

		_CurretGameRoom = await HubConnection.InvokeAsync<GameRoom>("CreateRoom",
			_CurrentRoomName, _PlayerName);
	}


	private async Task JoinRoom(string RoomId)
	{
		if (HubConnection is null)
			return;

		var joinedRoom = await HubConnection.InvokeAsync<GameRoom>(
			"JoinRoom",
			RoomId,
			_PlayerName);

		if (joinedRoom is not null)
		{
			_CurretGameRoom = joinedRoom;
		}
		else
		{
			Console.WriteLine("Room is full or does not exist.");
		}
	}

}
