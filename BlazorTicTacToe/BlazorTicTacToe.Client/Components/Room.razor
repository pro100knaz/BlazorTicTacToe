@using BlazorTicTacToe.Shared
@using Microsoft.AspNetCore.SignalR.Client

@if (CurrentRoom is not null)
{
	<h3>@CurrentRoom.RoomName</h3>

	if (CurrentRoom.Players.Count < 2)
	{
		<h4>Waiting for another player to Join</h4>
	}

	if (!CurrentRoom.Game.GameStarted && CurrentRoom.Game.PlayerXId != myPlayerId &&
	    CurrentRoom.Players.Count == 2)
	{
		<h4>Waiting For Another Player To Start The Game ...</h4>
	}

	if((!CurrentRoom.Game.GameStarted || CurrentRoom.Game.GameOver) && CurrentRoom.Game.PlayerXId == myPlayerId &&
	CurrentRoom.Players.Count == 2)
	{
		<button @onclick="StartGame">Start Game</button>
	}

	if (CurrentRoom.Game.GameStarted)
	{
		<h4>It's @CurrentRoom.Game.CurrentPlayerSymbol's  Turn </h4>
		<span> Currently playing: @CurrentRoom.Players[0].Name (X),  @CurrentRoom.Players[1].Name (O) </span>


	}

}


@code {

	private string? myPlayerId;

	[CascadingParameter]
	public HubConnection? HubConnection { get; set; }

	[Parameter]
	public GameRoom? CurrentRoom { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if(CurrentRoom is null || HubConnection is null || HubConnection.ConnectionId is null)
			return;

		myPlayerId = HubConnection.ConnectionId;

		HubConnection.On<Player>("PlayerJoined", player =>
		{
			CurrentRoom.Players.Add(player);
			StateHasChanged();
		});

		HubConnection.On<GameRoom>("UpdateGame", serverRoom =>
		{
			CurrentRoom = serverRoom;
			StateHasChanged();
		});
	}


	async Task StartGame()
	{
		if(HubConnection is null || CurrentRoom is null)
			return;

		await HubConnection.InvokeAsync("StartGame", CurrentRoom.RoomId);
	}

}
